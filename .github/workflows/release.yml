name: Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write # Needed to create GitHub releases
  id-token: write # Needed for JFrog Fly OIDC authentication

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup JFrog Fly
        uses: jfrog/fly-action@v1
        with:
          url: https://romanpprod5.jfrog.io

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Build package (if needed)
        run: |
          # Add any build steps here if your package needs compilation
          # npm run build

      - name: Publish to JFrog Fly
        run: npm publish

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi

          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## Changes in ${{ steps.version.outputs.tag }}

            ${{ steps.changelog.outputs.changelog }}

            ## Package Information
            - **Package**: `@romanp-lgtm/first@${{ steps.version.outputs.version }}`
            - **Registry**: JFrog Fly
            - **Install**: `npm install @romanp-lgtm/first@${{ steps.version.outputs.version }}`
          draft: false
          prerelease: false

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ steps.version.outputs.version }}
          path: |
            *.tgz
            package.json
            README.md
